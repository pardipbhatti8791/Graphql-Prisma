type Query {
    users(query: String): [User!]!
    me: User!
    posts(query: String): [Post!]!
    comments: [Comment]!
    post(id: ID!): Post!
    myPosts(query: String): [Post!]!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: updateUserInput!): User!
    createPost(data: CreatePostInput!): Post!
    deletePost: Post!
    updatePost(id: ID!, data: updatePostInput): Post!
    createComment(data: CreateCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: updateCommentInput!): Comment!
}

type Subscription {
    comment(postId: ID!): CommentSubscriptionPaylod!
    post: PostSubscriptionPayload!
}

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
    age: Int
}

input LoginUserInput {
    email: String!
    password: String!
}

input updateUserInput {
    name: String
    email: String
    age: Int
}

input CreatePostInput {
    title: String!, 
    body: String!, 
    published: Boolean!
}

input updatePostInput {
    title: String, 
    body: String, 
    published: Boolean
}

input CreateCommentInput {
    text: String!, 
    post: ID!
}

input updateCommentInput {
    text: String, 
}

type User { 
    id: ID!
    name: String!
    email: String
    password: String!
    age: Int,
    posts:[Post!]!
    comments: [Comment!]!
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post:  Post!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
    DRAFTED
    PUBLISHED
}

type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
}

type CommentSubscriptionPaylod {
    mutation: MutationType!
    node: Comment!
}